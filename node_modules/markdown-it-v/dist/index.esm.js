import _flatten from 'lodash/flatten';
import _fromPairs from 'lodash/fromPairs';
import { escapeHtml, unescapeAll } from 'markdown-it/lib/common/utils';
import OriginalRenderer from 'markdown-it/lib/renderer';

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      _defineProperty(target, key, source[key]);
    });
  }

  return target;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  }
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

function _iterableToArrayLimit(arr, i) {
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}

function createElementVueFactory(h) {
  return function createElementVue(tagName, attrs, innerHTML, children) {
    var arg2 = {
      attrs: attrs
    };

    if (innerHTML != null) {
      arg2.domProps = {
        innerHTML: innerHTML
      };
    }

    return h(tagName, arg2, children);
  };
}
function createElementReactFactory(h) {
  return function createElementReact(tagName, attrs, innerHTML, children) {
    var arg2 = _objectSpread({}, attrs);

    if (innerHTML != null) {
      arg2.dangerouslySetInnerHTML = {
        __html: innerHTML
      };
    }

    if (typeof arg2.style === 'string') {
      var styleString = arg2.style;
      delete arg2.style;

      arg2.ref = function (elem) {
        return elem.setAttribute('style', styleString);
      };
    }

    return h.apply(void 0, [tagName, arg2].concat(_toConsumableArray(children)));
  };
}
function createElementNativeFactory(document) {
  return function createElementNative(tagName, attrs, innerHTML, children) {
    var el = document.createElement(tagName);

    var _arr = Object.entries(attrs);

    for (var _i = 0; _i < _arr.length; _i++) {
      var _arr$_i = _slicedToArray(_arr[_i], 2),
          key = _arr$_i[0],
          value = _arr$_i[1];

      el.setAttribute(key, value);
    }

    if (innerHTML != null) {
      el.innerHTML = innerHTML;
    }

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var child = _step.value;
        el.appendChild(typeof child === 'string' ? document.createTextNode(child) : child);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return el;
  };
}

var voidElements = ['base', 'link', 'meta', 'hr', 'br', 'img', 'embed', 'param', 'source', 'area', 'col', 'input', 'command'];
var voidTag = Symbol('void');
var Node =
/*#__PURE__*/
function () {
  function Node(tagName) {
    var _Object$entries$filte;

    var attrs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var parent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

    _classCallCheck(this, Node);

    this.tagName = tagName;
    this.attrs = (_Object$entries$filte = Object.entries(attrs).filter(function (_ref) {
      var _ref2 = _slicedToArray(_ref, 2),
          key = _ref2[0],
          value = _ref2[1];

      return key !== '__html';
    }), _fromPairs(_Object$entries$filte));
    this.innerHTML = attrs.__html;
    this.parent = parent;

    for (var _len = arguments.length, children = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
      children[_key - 3] = arguments[_key];
    }

    this.children = children;
  }

  _createClass(Node, [{
    key: "renderAttrsToHTML",
    value: function renderAttrsToHTML() {
      return Object.entries(this.attrs).map(function (_ref3) {
        var _ref4 = _slicedToArray(_ref3, 2),
            key = _ref4[0],
            value = _ref4[1];

        return "".concat(escapeHtml(key), "=\"").concat(escapeHtml(value), "\"");
      }).join(' ');
    }
  }, {
    key: "renderInnerHTML",
    value: function renderInnerHTML() {
      var xhtmlOut = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

      if (voidElements.includes(this.tagName)) {
        return '';
      } else if (this.innerHTML == null) {
        return this.children.map(function (child) {
          return typeof child === 'string' ? escapeHtml(child) : child.renderToHTML(xhtmlOut);
        }).join('');
      } else {
        return this.innerHTML;
      }
    }
  }, {
    key: "renderToHTML",
    value: function renderToHTML() {
      var xhtmlOut = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

      if (this.tagName === voidTag) {
        return this.renderInnerHTML(xhtmlOut);
      }

      var attrsString = this.renderAttrsToHTML();
      var result = '<' + this.tagName;

      if (attrsString) {
        result += ' ' + attrsString;
      }

      if (voidElements.includes(this.tagName)) {
        if (xhtmlOut) {
          result += ' />';
        } else {
          result += '>';
        }
      } else {
        result += '>';
        result += this.renderInnerHTML(xhtmlOut);
        result += "</".concat(this.tagName, ">");
      }

      return result;
    }
  }, {
    key: "renderInnerVDOM",
    value: function renderInnerVDOM(h) {
      var _this$children$map;

      return _this$children$map = this.children.map(function (child) {
        return typeof child === 'string' ? child : child.renderToVDOM(h);
      }), _flatten(_this$children$map);
    }
  }, {
    key: "renderToVDOM",
    value: function renderToVDOM(h) {
      if (this.tagName === voidTag) {
        if (this.innerHTML != null) {
          throw new Error('`void` tag cannot contain innerHTML');
        }

        return this.renderInnerVDOM(h);
      } else {
        return h(this.tagName, this.attrs, this.innerHTML, this.renderInnerVDOM(h));
      }
    }
  }, {
    key: "dropParent",
    value: function dropParent() {
      this.parent = null;
    }
  }, {
    key: "dropParents",
    value: function dropParents() {
      this.dropParent();
      this.children.filter(function (el) {
        return typeof el !== 'string';
      }).forEach(function (el) {
        return el.dropParents();
      });
    }
  }]);

  return Node;
}();

var StreamDom =
/*#__PURE__*/
function () {
  function StreamDom() {
    _classCallCheck(this, StreamDom);

    _defineProperty(this, "currentNode", new Node(voidTag));

    _defineProperty(this, "xhtmlOut", false);
  }

  _createClass(StreamDom, [{
    key: "openTag",
    value: function openTag(tagName, attrs) {
      var newNode = new Node(tagName, attrs, this.currentNode);
      this.currentNode.children.push(newNode);
      this.currentNode = newNode;
    }
  }, {
    key: "closeTag",
    value: function closeTag() {
      this.currentNode = this.currentNode.parent;
    }
  }, {
    key: "appendText",
    value: function appendText(text) {
      this.currentNode.children.push(text);
    }
  }, {
    key: "toHTML",
    value: function toHTML() {
      var xhtmlOut = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.xhtmlOut;
      return this.currentNode.renderToHTML(xhtmlOut);
    }
  }, {
    key: "toVue",
    value: function toVue(createElement) {
      return this.currentNode.renderToVDOM(createElementVueFactory(createElement));
    }
  }, {
    key: "toReact",
    value: function toReact(createElement) {
      return this.currentNode.renderToVDOM(createElementReactFactory(createElement));
    }
  }, {
    key: "toNative",
    value: function toNative(document) {
      return this.currentNode.renderToVDOM(createElementNativeFactory(document)).map(function (el) {
        return typeof el === 'string' ? document.createTextNode(el) : el;
      });
    }
  }]);

  return StreamDom;
}();

var default_rules = {
  text: function text(tokens, idx, options, env, slf) {
    slf.sDom.appendText(tokens[idx].content);
    return slf.sDom;
  },
  code_inline: function code_inline(tokens, idx, options, env, slf) {
    var token = tokens[idx];
    slf.sDom.openTag('code', slf.renderAttrs(token));
    slf.sDom.appendText(token.content);
    slf.sDom.closeTag();
    return slf.sDom;
  },
  code_block: function code_block(tokens, idx, options, env, slf) {
    var token = tokens[idx];
    slf.sDom.openTag('pre', slf.renderAttrs(token));
    slf.sDom.openTag('code');
    slf.sDom.appendText(token.content);
    slf.sDom.closeTag();
    slf.sDom.closeTag();
    slf.sDom.appendText('\n');
    return slf.sDom;
  },
  fence: function fence(tokens, idx, options, env, slf) {
    var _options$highlight;

    var token = tokens[idx];
    var info = token.info ? unescapeAll(token.info).trim() : '';
    var langName = info ? info.split(/\s+/g)[0] : '';
    var attrs = slf.renderAttrs(token);

    function addClass(classString, className) {
      if (classString == null || classString === '') {
        return className;
      } else {
        return "".concat(classString, " ").concat(className);
      }
    }

    if (info) {
      attrs['class'] = addClass(attrs['class'], options.langPrefix + langName);
    }

    if (!options.highlightNoWrappingEls) {
      slf.sDom.openTag('pre');
      slf.sDom.openTag('code', attrs);
    }

    var highlighted = (_options$highlight = options.highlight) === null || _options$highlight === void 0 ? void 0 : _options$highlight.call(options, token.content, langName, slf);

    if (highlighted === slf.sDom) ; else if (typeof highlighted === 'string' && !options.highlightNoWrappingEls) {
      // When highlight function returns a string with highlightNoWrappingEls on,
      // fence can be nothing more than just text.
      slf.sDom.closeTag();
      slf.sDom.currentNode.children.pop();
      slf.sDom.openTag('code', _objectSpread({}, attrs, {
        __html: highlighted
      }));
    } else {
      slf.sDom.appendText(token.content);
    }

    if (!options.highlightNoWrappingEls) {
      slf.sDom.closeTag();
      slf.sDom.closeTag();
    }

    slf.sDom.appendText('\n');
    return slf.sDom;
  },
  hardbreak: function hardbreak(tokens, idx, options, env, slf) {
    slf.sDom.openTag('br');
    slf.sDom.closeTag();
    slf.sDom.appendText('\n');
  },
  softbreak: function softbreak(tokens, idx, options, env, slf) {
    if (options.breaks) {
      this.hardbreak(tokens, idx, options, env, slf);
    } else {
      slf.sDom.appendText('\n');
    }
  },
  html_block: function html_block(tokens, idx, options, env, slf) {
    slf.sDom.openTag(voidTag, {
      __html: tokens[idx].content
    });
    slf.sDom.closeTag();
  },
  html_inline: function html_inline(tokens, idx, options, env, slf) {
    slf.sDom.openTag(voidTag, {
      __html: tokens[idx].content
    });
    slf.sDom.closeTag();
  }
};

var Renderer =
/*#__PURE__*/
function (_OriginalRenderer) {
  _inherits(Renderer, _OriginalRenderer);

  function Renderer() {
    var _this;

    _classCallCheck(this, Renderer);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Renderer).call(this));
    Object.assign(_this.rules, default_rules);

    _this.clear();

    return _this;
  }

  _createClass(Renderer, [{
    key: "clear",
    value: function clear() {
      this.sDom = new StreamDom();
    }
  }, {
    key: "renderAttrs",
    value: function renderAttrs(_ref) {
      var _attrs;

      var attrs = _ref.attrs;
      return _attrs = attrs, _fromPairs(_attrs);
    }
  }, {
    key: "render",
    value: function render(tokens, options, env) {
      var _this2 = this;

      tokens.forEach(function (_ref2, i) {
        var type = _ref2.type,
            children = _ref2.children;

        if (type === 'inline') {
          _this2.renderInline(children, options, env);
        } else if (typeof _this2.rules[type] !== 'undefined') {
          _this2.rules[type](tokens, i, options, env, _this2);
        } else {
          _this2.renderToken(tokens, i, options, env);
        }
      });
      return this.sDom;
    }
  }, {
    key: "renderInline",
    value: function renderInline(tokens, options, env) {
      var _this3 = this;

      tokens.forEach(function (_ref3, i) {
        var type = _ref3.type;

        if (typeof _this3.rules[type] !== 'undefined') {
          _this3.rules[type](tokens, i, options, env, _this3);
        } else {
          _this3.renderToken(tokens, i, options);
        }
      });
      return this.sDom;
    }
  }, {
    key: "renderToken",
    value: function renderToken(tokens, idx, options) {
      var token = tokens[idx];
      var tagName = token.tag,
          nesting = token.nesting,
          hidden = token.hidden,
          block = token.block;

      if (!hidden) {
        if (block && nesting !== -1 && idx && tokens[idx - 1].hidden) {
          this.sDom.appendText('\n');
        }

        if (nesting < 0) {
          this.sDom.closeTag();
        } else {
          var attrs = this.renderAttrs(token);
          this.sDom.openTag(tagName, attrs);

          if (nesting === 0) {
            this.sDom.closeTag();
          }
        }

        var needLf = false;

        if (block) {
          needLf = true;

          if (nesting === 1) {
            if (idx + 1 < tokens.length) {
              var nextToken = tokens[idx + 1];

              if (nextToken.type === 'inline' || nextToken.hidden) {
                needLf = false;
              } else if (nextToken.nesting === -1 && nextToken.tag === token.tag) {
                needLf = false;
              }
            }
          }
        }

        if (needLf) {
          this.sDom.appendText('\n');
        }
      }

      return this.sDom;
    }
  }]);

  return Renderer;
}(OriginalRenderer);

var index = (function (md) {
  md.renderer = new Renderer();
  var render = md.render;
  var renderInline = md.renderInline;

  md.render = function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var result = render.apply(this, args);

    if (this.renderer instanceof Renderer) {
      this.renderer.clear();
      result.xhtmlOut = md.options.xhtmlOut;
    }

    return result;
  };

  md.renderInline = function () {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    var result = renderInline.apply(this, args);

    if (this.renderer instanceof Renderer) {
      this.renderer.clear();
      result.xhtmlOut = md.options.xhtmlOut;
    }

    return result;
  };
});

export default index;
//# sourceMappingURL=index.esm.js.map
